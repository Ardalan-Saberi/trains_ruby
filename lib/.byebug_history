n
exit
vv
exit
@stations["E"].get_distance
vv
exit
@stations["D"]
@stations["C"]
@stations["D"]
@stations["D"].get_distance_from("B")
@stations["C"].get_distance_from("B")
vv
exit
vv
exit
min_distance_to
exit
n
exit
vv
n
b
n
exit
p "#{v}"
v
n
exit
s
n
s
n
s
n
exit
min_distance_to.drop(destination)
min_distance_to.delete(destination)
min_distance_to.delete(destination).reject {|station, min_distance| false}
min_distance_to.delete(destination).reject {|station, min_distance| @staions[station_name].get_distance_from(destination) || min_distance == INFINITY}
min_distance_to.delete(destination).reject {|station, min_distance| @staions[station_name].get_distance_from(destination) || min_distance == INFINITY}.map {|station, min_distance| @staions[station_name].get_distance_from(destination) + min_distance}
          .map {|station, min_distance| @staions[station_name].get_distance_from(destination) + min_distance}
          .reject {|station, min_distance| @staions[station_name].get_distance_from(destination) || min_distance == INFINITY}
          .delete(destination)
 min_distance_to
n
exit
destination
 min_distance_to
 min_distance_to.delete "B"
 min_distance_to.delete! "B"
 min_distance_to
 min_distance_to.delete(destination).to_a
 min_distance_to.delete(destination).map {|x| p x}
destination
 min_distance_to
 min_distance_to.delete(destination) 
 min_distance_to.delete(destination) .reject {|station, min_distance| @staions[station_name].get_distance_from(destination) || min_distance == INFINITY}
min_cycle_distance
n
exit
s
n
min_distance
nearest_station
n
unvisited
min_distance_to
s
nearest_station
s
min_distance_to["C"]
min_ditance_to["C"]
min_distance
neighbour
s
destination
s
nearest_station
neares_station
n
s
previous_station["C"]
previous_station["D"]
previous_station["A"]
previous_station["B"]
previous_stations["B"]
previous_stations["D"]
s
previous_station
s
new_distance
s
min_distance
nearest_station
s
min_distance
nearest_station
n
s
unvisited
previous_station
min_distance_to
n
s
n
exit
nearest_station
n
s
unvisited
previous_station
min_distance_to
n
s
unvisited
s
nearest_station
s
min_distance
nearest_station
s
unvisited[origin]
min_distance
nearest_station
s
unvisited.keys
unvisited
unvisited_keys
s
unvisited
s
nearest_station
n
s
unvisited
n
s
n
exit
unvisited
nearest_station
n
s
@stations[nearest_station]
unvisited
s
unvisited
visited
min_distance
nearest_station
n
s
min_distance_to
n
s
n
min_distance
nearest_station
n
s
unvisited
unvistied
n
exit
min_distance_to
s
n
s
exit
s
n
s
n
exit
@stations.keys
@stations.keus
@stations.kets
s
n
exit
@stations.keys
unvisited
previous_station
min_distance_to
n
exit
dist[nearest]
distance[nearest]
nearest
mearest
nearest_distance
exit
nearest_distance
nearest
n
s
n
exit
n
exit
dist
n
s
n
exit
dist
prev
n
prev
n
distance
neighbour
s
dist[nearest]
s
n
nearest
n
s
dist
n
exit
nearest_distance
nearest
n
s
qs
prev
dist
n
s
n
s
prev
n
m
shorty
n
exit
prev
n
s
shorty
n
qs
s
shorty
s
n
s
n
@stations
n
exit
dist[shorty.name]
